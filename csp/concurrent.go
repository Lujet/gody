package main

// go 语言实战, Page122
// go 语言的并发指的是能让某个函数独立于其他函数运行的能力,
// 当一个函数创建为 goroutine 时, go 会将其作为一个独立的工作单元,
// 这个单元会被调度到逻辑处理器上执行。 go 语言的调度器运行在
// 操作系统之上, 将操作系统的线程与语言运行时的逻辑处理器绑定，并
// 在逻辑处理器上运行 goroutine, 调度器在任何给定的时间，都会全面
// 控制哪个 goroutine 在哪个逻辑处理器上运行。

// TODO: 深入了解
// 泛型CSP(Communicating Sequential Process), 通信顺序进程
// csp 是一种消息传递模型，通过在 goroutine 之间传递数据来传递
// 消息，而不是对数据进行加锁来实现同步访问.
// 用于在 goroutine 之间同步或传递数据的关键数据模型叫做通道(channel)

/*
* TODO: 百度所言，持怀疑态度
* CSP 作为理论支持, go 实现对并发的原生支持，从实际出发，go并未完全
* 实现 csp 模型的所有理论，仅是借用 process 和 channel 这两个概念，
* process 在 go 语言上的实现就是 goroutine, 是实际并发执行的实体，
* 每个实体间通过 channel 通讯来实现数据共享。
*
 */

/*
 * 当运行一个应用程序的时候，操作系统会为这个应用程序启动一个进程，
 * 可以将这个进程看做一个包含了应用程序在运行中需要用到和维护的各
 * 种资源的容器，这些资源包括但不限于内存地址空间、文件和设备的句柄
 * 以及线程。
 * 一个线程是一个执行空间，会被操作系统调度来运行函数中所写的代码;
 * 每个进程至少包含一个线程，每个进程的初始线程被称为主线程。因为执行
 * 这个线程的空间是应用程序的本身的空间， 所以当主线程终止时，应用程序
 * 也会终止。操作系统将线程调度到某个处理器上运行，这个处理器并不一定
 * 是进程所在的处理器(依不用操作系统的调度算法而不同)
 *
 * 操作系统会在物理处理器上调度线程来运行，而 go 语言的运行时会在逻辑
 * 处理器上调度 goroutine 来运行。每个逻辑处理器都分别绑定到单个操作系统
 * 线程。在go 1.5版本上，go 语言的运行时默认会为每个可用的物理处理器分配
 * 一个逻辑处理器, 在 1.5 版本之前的版本中，默认整个应用程序分配一个
 * 逻辑处理器， 这些逻辑处理器会用于执行所有被创建的 goroutine ， 即便
 * 只有一个逻辑处理器， go 也可以以很好的效率和性能调度无数个 goroutine 。
 *
 */
