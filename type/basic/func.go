package main

/*
	当函数存在返回列表时, 必须显式的以 return 语句结束, 除非函数明确不会走完
	整个执行流程;

	空白标识符强调形参在函数中未使用(TODO: 什么场景下会用?)
	func Add(x int, _ int) int { return x }

	函数的类型称为函数签名, 当两个函数有相同的形参列表和返回列表时, 这两个函数
	的类型或签名是相同的; 而形参和返回值的名字不会影响到函数类型, 采用简写同样
	也不会影响到函数的类型;

	go 语言没有默认参数值的概念, 也不指定实参名, 所以形参和返回值的命名不会对
	调用方有影响;

	形参变量都是函数的局部变量, 初始值由调用者提供的实参传递; 函数形参以及命名
	返回值同属于函数最外层作用域的局部变量(TODO:最外层作用域是函数体内的头尾?)


	实参是按值传递的, 所以函数接收到的是每个实参的副本, 修改函数的形参变量并
	不会影响到调用者提供的实参; 如果提供的实参包含引用类型, 比如指针, slice,
	map, 函数或者通道, 当函数使用形参变量时就会间接修改实参变量;

	有些函数的声明没有函数体, 代表函数使用除了 go 以外的语言实现, 如以下
	函数的签名:
	func Sin(x float64) float64 // 使用汇编语言实现

*/
