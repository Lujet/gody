package main

/*
	基本数据(基础类型)

	计算机底层都是位, 而实际操作则是基于大小固定的单元中的数值, 称为字(word);
	go 的数据类型宽泛, 并有多种组织方式, 向下匹配硬件特性, 向上满足程序员所需,
	从而可以方便的表示复杂数据结构;

	数据类型分为:
		- 基础类型(basic type)
		- 聚合类型(aggregate type)
		- 引用类型(reference type)
		- 接口类型(interface type)

	引用类型全都间接指向程序变量或状态, 于是操作所引用数据的效果就会遍及该数据
	的全部引用.

	int 和 uint 在特定的平台上, 其大小与原生的有符号整数\无符号整数相同, 或等于
	该平台上运算效率最高的值, int 是使用最广泛的数值类型; 这两种类型大小相等,
	都是32位或64位, 但不能认为它们一定是32位或一定就是64位, 即使在同样的硬件平台
	上, 不同的编译器可能选用不同的大小;

	rune 是int32类型的同义词, 用于指明一个值是 Unicode 码点(code point); 这两个
	名称可以互换; 同样, byte 类型是 uint8 类型的同义词, 强调一个值是原始数据而非
	量值;(TODO: 量值怎么理解?)

	uintptr 无符号整数, 大小不明确, 但足以完整存放指针; uintptr 类型仅仅用于底层
	编程, 例如在 go 程序和 c 程序库或操作系统的接口界面;

	int, uint, uintptr 都有别于其大小明确的相似类型的类型; int 和 int32 是不同的
	类型, 尽管 int 天然的大小就是32位, 并且 int 值若要当做 int32 使用, 必须显式
	转换, 反之亦然;

	有符号整数以补码表示(TODO:补码), 保留最高位作为符号位; 无符号整数由全部位构
	成其非负值;

*/
