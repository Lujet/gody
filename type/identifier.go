package main

// 公开或未公开的标识符

/*
* 标识符是指用来标识某个实体的一个符号, 在不同的应用环境下有不同的含义
* 程序中的标识符用于给变量、常量、函数、语句块等命名, 以建立起名称与使用
* 之间的关系
*
 */

// 要想设计出好的API, 需要使用某种规则来控制声明后的标识符的可见性, go 语言
// 支持从包里公开或隐藏标识符，通过这个功能，让用户按照自己的规则控制标识符的
// 可见性

// 当一个标识符的名字以小写字母开头时，这个标识符就是未公开的，即包外的代码
// 不可见

// go 语言实战, Page115
//---------------------------------------------------
// counters 包提供告警计数器的功能
// counters/counters.go
// package counters

// alertCounter 是一个未公开的类型
// 这个类型用于保存告警计数
// type alertCounter int

// New 创建并返回一个未公开的 alertCounter 类型的值
// func New(value int) alertCounter {
// 	return alertCounter(value)
// }

//---------------------------------------------------
// 展示如何访问另一个包的未公开的标识符的值
// import "fmt"
// import "counters"

// func main() {
// 使用 counters 包公开的New函数来创建一个未公开的类型的变量
// counter := counters.New(10)
// fmt.Printf("Counter: %d\n", counter)
// }
//---------------------------------------------------

// 将工厂函数命名为 New 是一种惯例，New 创建了一个未公开的
// 类型的值，并将这个值返回给调用者
// New 函数返回的是一个未公开的 alertCounter 类型的值, 而 main 函数
// 能够接受这个值并创建一个未公开的类型的变量
// 要满足以上, 需要:
// - 标识符才有公开或未公开的属性，值没有
// - 短变量声明操作符,有能力捕获引用的类型，并创建一个未公开的类型的变量(隐式)
// 注: 永远不能显式创建一个未公开类型的变量，不过短变量操作符可以这样做
// 则说明短变量声明操作符存在的必要性

type user struct {
	Name  string
	Email string
}

type Admin struct {
	user   // 嵌入的类型未公开
	Rights int
}

// 在其他包引用
func main() {
	a := Admin{
		Rights: 10,
	}

	// 设置未公开的内部类型的公开字段的值
	a.Name = "loin"
	a.Email = "loin@163.com"
	// 未公开的内部类型的字段Name和Email可以通过外部类型的变量a被访问
	// 并被初始化

	// 因为user类型是未公开的，所以不能直接访问内部类型
	// a.user.Name = "loin"

}

// 对于嵌入类型,即使内部类型是未公开的, 内部类型声明的字段(大写字母开头)依
// 旧是公开的, 既然内部类型的标识符提升到了外部类型, 那么这些公开的字段
// 也可以通过外部类型的值来访问
//
