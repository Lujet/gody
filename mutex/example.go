package main

/*
当发生数据竞态的变量类型是大于一个机器字长的类型(如接口，字符串或slice)
时，情况更加复杂。
*/

import (
	"runtime"
)

func main() {
	runtime.GOMAXPROCS(1)
	var x []int
	go func() { x = make([]int, 10) }()
	go func() { x = make([]int, 1000000) }()
	x[9999] = 1 // 未定义行为，可能造成内存异常
	//  x 的值是未定义的，它可能是 nil、 一个长度为10的slice或者
	// 一个长度为1000000的slice.
	// slice的三个部分: 指针、长度、容量
	// 如果指针来自于第一个make调用, 而长度来自于第二个make调用
	// 那么 x 会变成一个嵌合体，它名义上长度为 1000000 ， 但底层
	// 的数组只有10个元素, 在这种情况下，尝试存储到第 9999 个元素
	// 会伤及很遥远的一段内存，其恶果无法预测，问题也难以调试和定位,
	// 这种语义上的雷区称为未定义行为(c中常见， go中不常见)
	// todo: 难以模拟
}
